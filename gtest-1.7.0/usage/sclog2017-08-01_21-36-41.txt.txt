CoderZh的技术博客
一个程序员的思考与总结(请移步至：http://blog.coderzh.com/)
博客园
首页
联系
订阅
管理
随笔-234  文章-10  评论-2044 
玩转Google开源C++单元测试框架Google Test系列(gtest)之二 - 断言

一、前言

这篇文章主要总结gtest中的所有断言相关的宏。 gtest中，断言的宏可以理解为分为两类，一类是ASSERT系列，一类是EXPECT系列。一个直观的解释就是：
1. ASSERT_* 系列的断言，当检查点失败时，退出当前函数（注意：并非退出当前案例）。 
2. EXPECT_* 系列的断言，当检查点失败时，继续往下执行。

二、示例

// int型比较，预期值：3，实际值：Add(1, 2)
EXPECT_EQ(3, Add(1, 2))
// 
 

假如你的Add(1, 2) 结果为4的话，会在结果中输出：

g:\myproject\c++\gtestdemo\gtestdemo\gtestdemo.cpp(16): error: Value of: Add(1, 2)
  Actual: 4
Expected:3
如果是将结果输出到xml里的话，将输出：（关于将结果输出为xml，见：http://www.cnblogs.com/coderzh/archive/2009/04/10/1432789.html）

复制代码
<testcase name="Demo" status="run" time="0" classname="AddTest">
      <failure message="Value of: Add(1, 2)   Actual: 4 Expected: 3" type=""><![CDATA[g:\myproject\c++\gtestdemo\gtestdemo\gtestdemo.cpp:16
Value of: Add(1, 2)
  Actual: 4
Expected: 3]]></failure>
</testcase>
复制代码
 

如果你对自动输出的出错信息不满意的话，你还可以通过操作符<<将一些自定义的信息输出，通常，这对于调试或是对一些检查点的补充说明来说，非常有用！

下面举个例子：

如果不使用<<操作符自定义输出的话： 

for (int i = 0; i < x.size(); ++i) 
{
    EXPECT_EQ(x[i], y[i]);
}

看到的结果将是这样的，你根本不知道出错时 i 等于几：

g:\myproject\c++\gtestdemo\gtestdemo\gtestdemo.cpp(25): error: Value of: y[i]
  Actual: 4
Expected: x[i]
Which is: 3
 

如果使用<<操作符将一些重要信息输出的话：

for (int i = 0; i < x.size(); ++i)
{
    EXPECT_EQ(x[i], y[i]) << "Vectors x and y differ at index " << i;
}


从输出结果中就可以定位到在 i = 2 时出现了错误。这样的输出结果看起来更加有用，容易理解： 

g:\myproject\c++\gtestdemo\gtestdemo\gtestdemo.cpp(25): error: Value of: y[i]
  Actual: 4
Expected: x[i]
Which is: 3
Vectors x and y differ at index 2
 

三、布尔值检查
Fatal assertion	Nonfatal assertion	Verifies
ASSERT_TRUE(condition);	EXPECT_TRUE(condition);	condition is true
ASSERT_FALSE(condition);	EXPECT_FALSE(condition);	condition is false
 

四、数值型数据检查

Fatal assertion	Nonfatal assertion	Verifies
ASSERT_EQ(expected, actual);	EXPECT_EQ(expected, actual);	expected == actual
ASSERT_NE(val1, val2);	EXPECT_NE(val1, val2);	val1 != val2
ASSERT_LT(val1, val2);	EXPECT_LT(val1, val2);	val1 < val2
ASSERT_LE(val1, val2);	EXPECT_LE(val1, val2);	val1 <= val2
ASSERT_GT(val1, val2);	EXPECT_GT(val1, val2);	val1 > val2
ASSERT_GE(val1, val2);	EXPECT_GE(val1, val2);	val1 >= val2
 

五、字符串检查 

Fatal assertion	Nonfatal assertion	Verifies
ASSERT_STREQ(expected_str, actual_str);	EXPECT_STREQ(expected_str, actual_str);	the two C strings have the same content
ASSERT_STRNE(str1, str2);	EXPECT_STRNE(str1, str2);	the two C strings have different content
ASSERT_STRCASEEQ(expected_str, actual_str);	EXPECT_STRCASEEQ(expected_str, actual_str);	the two C strings have the same content, ignoring case
ASSERT_STRCASENE(str1, str2);	EXPECT_STRCASENE(str1, str2);	the two C strings have different content, ignoring case
 

*STREQ*和*STRNE*同时支持char*和wchar_t*类型的，*STRCASEEQ*和*STRCASENE*却只接收char*，估计是不常用吧。下面是几个例子：

复制代码
TEST(StringCmpTest, Demo)
{
    char* pszCoderZh = "CoderZh";
    wchar_t* wszCoderZh = L"CoderZh";
    std::string strCoderZh = "CoderZh";
    std::wstring wstrCoderZh = L"CoderZh";

    EXPECT_STREQ("CoderZh", pszCoderZh);
    EXPECT_STREQ(L"CoderZh", wszCoderZh);

    EXPECT_STRNE("CnBlogs", pszCoderZh);
    EXPECT_STRNE(L"CnBlogs", wszCoderZh);

    EXPECT_STRCASEEQ("coderzh", pszCoderZh);
    //EXPECT_STRCASEEQ(L"coderzh", wszCoderZh);    不支持

    EXPECT_STREQ("CoderZh", strCoderZh.c_str());
    EXPECT_STREQ(L"CoderZh", wstrCoderZh.c_str());
}
复制代码
 

六、显示返回成功或失败
直接返回成功：SUCCEED();

返回失败： 
Fatal assertion	Nonfatal assertion
FAIL();	ADD_FAILURE();
 

复制代码
TEST(ExplicitTest, Demo)
{
    ADD_FAILURE() << "Sorry"; // None Fatal Asserton，继续往下执行。

    //FAIL(); // Fatal Assertion，不往下执行该案例。

    SUCCEED();
}
复制代码
七、异常检查


Fatal assertion	Nonfatal assertion	Verifies
ASSERT_THROW(statement, exception_type);	EXPECT_THROW(statement, exception_type);	statement throws an exception of the given type
ASSERT_ANY_THROW(statement);	EXPECT_ANY_THROW(statement);	statement throws an exception of any type
ASSERT_NO_THROW(statement);	EXPECT_NO_THROW(statement);	statement doesn't throw any exception
 

例如：

复制代码
int Foo(int a, int b)
{
    if (a == 0 || b == 0)
    {
        throw "don't do that";
    }
    int c = a % b;
    if (c == 0)
        return b;
    return Foo(b, c);
}

TEST(FooTest, HandleZeroInput)
{
    EXPECT_ANY_THROW(Foo(10, 0));
    EXPECT_THROW(Foo(0, 5), char*);
}
复制代码
八、Predicate Assertions

在使用EXPECT_TRUE或ASSERT_TRUE时，有时希望能够输出更加详细的信息，比如检查一个函数的返回值TRUE还是FALSE时，希望能够输出传入的参数是什么，以便失败后好跟踪。因此提供了如下的断言：
Fatal assertion	Nonfatal assertion	Verifies
ASSERT_PRED1(pred1, val1);	EXPECT_PRED1(pred1, val1);	pred1(val1) returns true
ASSERT_PRED2(pred2, val1, val2);	EXPECT_PRED2(pred2, val1, val2);	pred2(val1, val2) returns true
...	...	...
 

Google人说了，他们只提供<=5个参数的，如果需要测试更多的参数，直接告诉他们。下面看看这个东西怎么用。 
复制代码
bool MutuallyPrime(int m, int n)
{
    return Foo(m , n) > 1;
}

TEST(PredicateAssertionTest, Demo)
{
    int m = 5, n = 6;
    EXPECT_PRED2(MutuallyPrime, m, n);
}
复制代码
 

当失败时，返回错误信息：

error: MutuallyPrime(m, n) evaluates to false, where
m evaluates to 5
n evaluates to 6

如果对这样的输出不满意的话，还可以自定义输出格式，通过如下：

Fatal assertion	Nonfatal assertion	Verifies
ASSERT_PRED_FORMAT1(pred_format1, val1);`	EXPECT_PRED_FORMAT1(pred_format1, val1);	pred_format1(val1) is successful
ASSERT_PRED_FORMAT2(pred_format2, val1, val2);	EXPECT_PRED_FORMAT2(pred_format2, val1, val2);	pred_format2(val1, val2) is successful
...	...
 

用法示例：

复制代码
testing::AssertionResult AssertFoo(const char* m_expr, const char* n_expr, const char* k_expr, int m, int n, int k) {
    if (Foo(m, n) == k)
        return testing::AssertionSuccess();
    testing::Message msg;
    msg << m_expr << " 和 " << n_expr << " 的最大公约数应该是：" << Foo(m, n) << " 而不是：" << k_expr;
    return testing::AssertionFailure(msg);
}

TEST(AssertFooTest, HandleFail)
{
    EXPECT_PRED_FORMAT3(AssertFoo, 3, 6, 2);
}
复制代码
失败时，输出信息：

error: 3 和 6 的最大公约数应该是：3 而不是：2

是不是更温馨呢，呵呵。 
九、浮点型检查

Fatal assertion	Nonfatal assertion	Verifies
ASSERT_FLOAT_EQ(expected, actual);	EXPECT_FLOAT_EQ(expected, actual);	the two float values are almost equal
ASSERT_DOUBLE_EQ(expected, actual);	EXPECT_DOUBLE_EQ(expected, actual);	the two double values are almost equal
 

对相近的两个数比较：

Fatal assertion	Nonfatal assertion	Verifies
ASSERT_NEAR(val1, val2, abs_error);	EXPECT_NEAR(val1, val2, abs_error);	the difference between val1 and val2 doesn't exceed the given absolute error
 

同时，还可以使用：

EXPECT_PRED_FORMAT2(testing::FloatLE, val1, val2);
EXPECT_PRED_FORMAT2(testing::DoubleLE, val1, val2);
 

十、Windows HRESULT assertions


Fatal assertion	Nonfatal assertion	Verifies
ASSERT_HRESULT_SUCCEEDED(expression);	EXPECT_HRESULT_SUCCEEDED(expression);	expression is a success HRESULT
ASSERT_HRESULT_FAILED(expression);	EXPECT_HRESULT_FAILED(expression);	expression is a failure HRESULT
 

例如：

CComPtr shell;
ASSERT_HRESULT_SUCCEEDED(shell.CoCreateInstance(L"Shell.Application"));
CComVariant empty;
ASSERT_HRESULT_SUCCEEDED(shell->ShellExecute(CComBSTR(url), empty, empty, empty, empty));
 

十一、类型检查

类型检查失败时，直接导致代码编不过，难得用处就在这？看下面的例子：

复制代码
template <typename T> class FooType {
public:
    void Bar() { testing::StaticAssertTypeEq<int, T>(); }
};

TEST(TypeAssertionTest, Demo)
{
    FooType<bool> fooType;
    fooType.Bar();
}
复制代码
 

十二、总结

 本篇将常用的断言都介绍了一遍，内容比较多，有些还是很有用的。要真的到写案例的时候，也行只是一两种是最常用的，现在时知道有这么多种选择，以后才方便查询。

系列链接：

1.玩转Google开源C++单元测试框架Google Test系列(gtest)之一 - 初识gtest
2.玩转Google开源C++单元测试框架Google Test系列(gtest)之二 - 断言
3.玩转Google开源C++单元测试框架Google Test系列(gtest)之三 - 事件机制

4.玩转Google开源C++单元测试框架Google Test系列(gtest)之四 - 参数化

5.玩转Google开源C++单元测试框架Google Test系列(gtest)之五 - 死亡测试 
6.玩转Google开源C++单元测试框架Google Test系列(gtest)之六 - 运行参数

7.玩转Google开源C++单元测试框架Google Test系列(gtest)之七 - 深入解析gtest
8.玩转Google开源C++单元测试框架Google Test系列(gtest)之八 - 打造自己的单元测试框架
 


DigitalOcean的VPS主机，稳定、速度快、价格也实惠。可以在上面部署独立网站或各种实用工具。
我用了很久了，确实不错，极力推荐。
使用这个链接购买可获得10美元优惠。

优惠链接： DigitalOcean优惠码 


微信扫一扫交流
作者：CoderZh 
公众号：hacker-thinking （一个程序员的思考） 
独立博客：http://blog.coderzh.com 
博客园博客将不再更新，请关注我的「微信公众号」或「独立博客」。 
作为一个程序员，思考程序的每一行代码，思考生活的每一个细节，思考人生的每一种可能。 
文章版权归本人所有，欢迎转载，但未经作者同意必须保留此段声明，且在文章页面明显位置给出原文连接，否则保留追究法律责任的权利。
分类: 单元测试,C/C++
标签: Google Test
好文要顶 关注我 收藏该文    
CoderZh
关注 - 10
粉丝 - 777
+加关注
4 0
? 上一篇：玩转Google开源C++单元测试框架Google Test系列(gtest)之一 - 初识gtest
? 下一篇：玩转Google开源C++单元测试框架Google Test系列(gtest)之三 - 事件机制
posted @ 2009-04-06 18:17 CoderZh 阅读(102466) 评论(9) 编辑 收藏
评论列表
   #1楼 2010-06-20 16:52 纯一狼  
>>*STRCASEEQ*和*STRCASENE*却只接收char*，估计是不常用吧

- 比如汉字等就不区分大小写的，基于这个原因，所以不提供针对wchar_t的忽略大小写版本。
支持(0)反对(0)
   #2楼 2011-07-04 19:06 xhuren  
最后一个测试用例编译出错 error C2514: “testing::internal::StaticAssertTypeEqHelper<T1,T2>”: 类没有构造函数

求大虾指教？
支持(0)反对(0)
   #3楼 2011-08-31 14:51 lyly0904
请问 如果想比较数组是否相等 或者比较内存是否相等 应该用什么宏？
   #4楼 2011-08-31 14:52 lyly0904
我的邮箱lyly0904@163.com 谢谢
   #5楼 2011-12-31 15:53 ~波  
如果断言失败了，如何查看是哪行代码导致的失败？
支持(0)反对(0)
   #6楼 2012-12-29 10:10 dEMON_hUNTER  
写的很不错，能转载吗（不为别的，只是在自己需要的时候方便查看）

谢谢。
支持(0)反对(0)
   #7楼 2013-07-20 14:04 czjone  
此框架是否支持 覆盖率的体现呢？
支持(0)反对(0)
   #8楼 2014-05-14 15:58 xincpp  
SUCCEED宏是什么意思呢，没看明白

Generates a success. This does NOT make the overall test succeed. A test is considered successful only if none of its assertions fail during its execution.
支持(0)反对(0)
   #9楼 2015-09-29 19:04 mollywml  
@ xhuren
就是报错才说明类型检查失败，如果把TEST里的bool换成int程序不会报错。
这点博客里说了的：“直接导致代码编不过”
支持(0)反对(0)
刷新评论刷新页面返回顶部
注册用户登录后才能发表评论，请 登录 或 注册，访问网站首页。
最新IT新闻:
・ 腾讯战队黑客“世界杯”进军三甲，互联网安全人才培养闭环成效显著
・ 建行冻结乐视网及贾跃亭共2.5亿元财产：法院已批准执行
・ 小米移动电源为何这么便宜？低毛利让我感觉很踏实
・ 菜鸟裹裹在上海南京全面启用绿色包裹：无胶带可降解
・ 东芝资不抵债 已被降级至东交所二板市场
? 更多新闻...
最新知识库文章:
・ 为什么你该开始学习编程了？
・ 小printf的故事：什么是真正的程序员？
・ 程序员的工作、学习与绩效
・ 软件开发为什么很难
・ 唱吧DevOps的落地，微服务CI/CD的范本技术解读
? 更多知识库文章...
公告
DigitalOcean优惠码
这里的博客将不再更新，最新博客请移步至：
我的独立博客：
http://blog.coderzh.com/

微信公众号：
hacker-thinking
昵称：CoderZh
园龄：10年11个月
粉丝：777
关注：10
+加关注
搜索

 找找看
随笔分类
Agile(2)
Android(3)
ASP.NET(3)
C#(20)
C/C++(24)
Cocos2d-x(1)
Emacs(2)
Google App Engine(7)
JAVA(3)
Linux(1)
Lua(2)
Python(66)
Ubuntu(9)
VBS(4)
安全性测试(9)
测试生活感悟(7)
程序人生(15)
代码安全(3)
单元测试(19)
公告(13)
每周总结(4)
软件测试(30)
设计模式
性能测试(7)
学习笔记(27)
随笔档案
2015年9月 (1)
2015年8月 (2)
2015年6月 (4)
2015年5月 (2)
2015年4月 (5)
2015年3月 (1)
2014年5月 (2)
2014年4月 (2)
2011年5月 (1)
2011年3月 (1)
2011年1月 (1)
2010年12月 (3)
2010年11月 (3)
2010年10月 (2)
2010年9月 (6)
2010年8月 (2)
2010年7月 (4)
2010年6月 (3)
2010年5月 (4)
2010年4月 (9)
2010年3月 (6)
2010年2月 (3)
2010年1月 (16)
2009年12月 (6)
2009年11月 (3)
2009年10月 (4)
2009年9月 (3)
2009年8月 (2)
2009年7月 (7)
2009年6月 (2)
2009年4月 (12)
2009年3月 (5)
2009年2月 (2)
2009年1月 (3)
2008年12月 (7)
2008年11月 (9)
2008年9月 (8)
2008年8月 (7)
2008年7月 (8)
2008年6月 (9)
2008年5月 (33)
2008年4月 (6)
2008年2月 (1)
2007年12月 (3)
2007年11月 (3)
2007年10月 (7)
2007年9月 (1)
系列文章
Python天天美味系列
攻击方式学习系列
瘦客户端那些事
玩转gtest系列
读书笔记
Python网络编程
xUnit Test Patterns
卓有成效的程序员
友情链接
积分与排名
积分 -	546828
排名 -	193
最新评论
1. Re:玩转Google开源C++单元测试框架Google Test系列(gtest)之七 - 深入解析gtest
谢谢，作者哥哥，这么多章，最精彩这章。领教了，谢谢
--$JackChen
2. Re:最常用的Emacs的基本操作
如果Emacs入手都算有些难度。。。那VIM怎么办？
--震灵
3. Re:PyQt4学习资料汇总
大神，我下了你的财务管理系统，那个数据库文件提示打不开，怎么解决啊~~急用~~
--lzgst
4. Re:ViEmuVS2013-3.2.1 破解
为啥我的注册表中没有whole tomato
--蓝域小兵
5. Re:玩转Google开源C++单元测试框架Google Test系列(gtest)之三 - 事件机制
由于没有加TEST 宏，输出结果如下：[==========] Running 0 tests from 0 test cases.[==========] 0 tests from 0 test c......
--喜马拉雅
6. Re:从CEGUI源码看代码规范
好一个singleton！
--chaosink
7. Re:使用UI Automation库用于UI自动化测试
mark
--大恒爸爸
8. Re:Facebook网络模拟测试工具ATC使用
楼主，我执行sudo atcd --atcd-lan wlp4s0 报找不到atcd命令，wlp4s0是我的网卡名称，我跳过这步执行sudo python manage.py runserver 0.......
--vbs_liuyoung
9. Re:Facebook网络模拟测试工具ATC使用
请问楼主,为什么执行 sudo atcd --atcd-lan wlan0  说是找不到atcd命令呢???按步骤,我并没有报错什么的
--vbs_liuyoung
10. Re:Facebook网络模拟测试工具ATC使用
@可以了楼主，我在百度上找到解决方案了，在atcui/urls.py里面加上一个from django.conf.urls import include
虽然我不太明白是何以。但是解决了错误
--vbs_liuyoung
阅读排行榜
1. 玩转Google开源C++单元测试框架Google Test系列(gtest)(总)(217758)
2. 玩转Google开源C++单元测试框架Google Test系列(gtest)之一 - 初识gtest(143958)
3. 玩转Google开源C++单元测试框架Google Test系列(gtest)之二 - 断言(102464)
4. 玩转Google开源C++单元测试框架Google Test系列(gtest)之三 - 事件机制(67171)
5. 玩转Google开源C++单元测试框架Google Test系列(gtest)之四 - 参数化(53431)
6. 玩转Google开源C++单元测试框架Google Test系列(gtest)之六 - 运行参数(53303)
7. C# 中使用JSON - DataContractJsonSerializer(50237)
8. PyQt4学习资料汇总(49209)
9. 玩转Google开源C++单元测试框架Google Test系列(gtest)之七 - 深入解析gtest(48238)
10. 代码覆盖率浅谈(45919)
评论排行榜
1. PyQt4学习资料汇总(152)
2. 开源Granados介绍 - SSH连接远程Linux服务器(C#)(66)
3. (原创)攻击方式学习之(1) - 跨站式脚本(Cross-Site Scripting) (49)
4. 三年之痒(44)
5. NancyBlog - 我的Google App Engine Blog(42)
6. 创业三年来的一些感想 - 游戏篇(40)
7. CCNET+MSBuild+SVN实时构建的优化总结(40)
8. CoderZh首款Python联机对战游戏 - NancyTetris1.0倾情发布（一）(37)
9. 代码安全系列(1) - Log的注入(35)
10. 程序员的信仰(35)
推荐排行榜
1. 玩转Google开源C++单元测试框架Google Test系列(gtest)(总)(23)
2. 创业三年来的一些感想 - 游戏篇(14)
3. 程序员的共鸣 - 读《卓有成效的程序员》(12)
4. 代码覆盖率浅谈(12)
5. 《xUnit Test Patterns》学习笔记5 - xUnit基础(10)
6. 三年之痒(9)
7. 玩转Google开源C++单元测试框架Google Test系列(gtest)之一 - 初识gtest(9)
8. 优美的测试代码 - 行为驱动开发(BDD)(8)
9. Python天天美味(总)(7)
10. PyQt4学习资料汇总(6)

